{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "basic",
  "type": "registry:component",
  "title": "Basic Open Graph",
  "description": "A basic Open Graph template",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "registry/components/open-graph/basic.tsx",
      "content": "import { patterns } from \"@/registry/lib/patterns\";\nimport { BasicTemplate } from \"@/registry/lib/templates/open-graph/basic\";\nimport { toBackgroundShorthand } from \"@/registry/lib/templates/elements/background\";\nimport { absoluteUrl } from \"@/registry/lib/url\";\nimport { Watermark } from \"@/registry/components/elements/watermark\";\n\nexport const BasicOGTemplate = ({\n  template,\n  renderWatermark,\n}: {\n  template: BasicTemplate;\n  renderWatermark: boolean;\n}) => (\n  <div\n    style={{\n      width: template.canvas.width,\n      height: template.canvas.height,\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      background: toBackgroundShorthand(template.background),\n    }}\n  >\n    <div\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        position: \"absolute\",\n        inset: 0,\n        filter: \"brightness(100%) contrast(150%)\",\n        opacity: template.background.noise,\n        backgroundImage: `url('${absoluteUrl(\"/noise.svg\")}')`,\n        backgroundRepeat: \"repeat\",\n      }}\n    ></div>\n\n    {template.background.gridOverlay && (\n      <div\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          position: \"absolute\",\n          backgroundImage: `url('${patterns[\n            template.background.gridOverlay.pattern\n          ].svg({\n            color: template.background.gridOverlay.color,\n            opacity: template.background.gridOverlay.opacity,\n          })}')`,\n          maskImage:\n            template.background.gridOverlay.blurRadius > 0\n              ? `radial-gradient(rgb(0, 0, 0) 0%, rgba(0, 0, 0, 0) ${\n                  100 - template.background.gridOverlay.blurRadius\n                }%)`\n              : \"none\",\n        }}\n      ></div>\n    )}\n\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: \"0.75rem\",\n      }}\n    >\n      {template.params.logo.url && (\n        <img\n          style={{\n            width: \"6rem\",\n            height: \"6rem\",\n          }}\n          src={template.params.logo.url}\n        />\n      )}\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          gap: \"0.25rem\",\n        }}\n      >\n        {template.params.title.text && (\n          <div\n            style={{\n              fontFamily: template.params.title.fontFamily,\n              fontWeight: template.params.title.fontWeight,\n              fontSize: `${template.params.title.fontSize}px`,\n              color: template.params.title.color,\n              letterSpacing: \"-0.025em\",\n            }}\n          >\n            {template.params.title.text}\n          </div>\n        )}\n\n        {template.params.description.text && (\n          <div\n            style={{\n              fontFamily: template.params.description.fontFamily,\n              fontWeight: template.params.description.fontWeight,\n              fontSize: `${template.params.description.fontSize}px`,\n              color: template.params.description.color,\n            }}\n          >\n            {template.params.description.text}\n          </div>\n        )}\n      </div>\n    </div>\n\n    {renderWatermark && (\n      <Watermark\n        style={{\n          bottom: \"2rem\",\n          right: \"2rem\",\n        }}\n      />\n    )}\n  </div>\n);\n",
      "type": "registry:component"
    },
    {
      "path": "registry/lib/patterns.ts",
      "content": "interface PatternProps {\n  color?: string\n  opacity?: number\n}\n\nfunction grid({ color = \"black\", opacity = 0.5 }: PatternProps) {\n  return (\n    \"data:image/svg+xml;base64,\" +\n    btoa(`<svg\nxmlns=\"http://www.w3.org/2000/svg\"\nwidth=\"48\"\nheight=\"48\"\nviewBox=\"0 0 48 48\"\n>\n<g fill=\"none\" opacity=\"${opacity}\">\n  <path d=\"M48 47.5001L0 47.5001\" stroke=\"${color}\"></path>\n  <path d=\"M47.5 0V48\" stroke=\"${color}\"></path>\n</g>\n</svg>\n`)\n  )\n}\n\nfunction graphPaper({ color = \"black\", opacity = 0.5 }: PatternProps) {\n  return (\n    \"data:image/svg+xml;base64,\" +\n    btoa(`<svg\nxmlns=\"http://www.w3.org/2000/svg\"\nwidth=\"100\"\nheight=\"100\"\nviewBox=\"0 0 100 100\"\n>\n<g fill-rule=\"evenodd\" fill=\"${color}\" fill-opacity=\"${opacity}\">\n  <g>\n    <path\n      opacity=\".5\"\n      d=\"M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z\"\n    />\n    <path d=\"M6 5V0H5v5H0v1h5v94h1V6h94V5H6z\" />\n  </g>\n</g>\n</svg>\n`)\n  )\n}\n\nfunction dots({ color = \"black\", opacity = 0.5 }: PatternProps) {\n  return (\n    \"data:image/svg+xml;base64,\" +\n    btoa(`<svg\n  width=\"20px\"\n  height=\"20px\"\n  viewBox=\"0 0 20 20\"\n  version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n>\n  <defs></defs>\n  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n    <g id=\"dots\" fill=\"${color}\" fill-opacity=\"${opacity}\">\n      <circle id=\"Oval-377-Copy-9\" cx=\"3\" cy=\"3\" r=\"3\"></circle>\n      <circle id=\"Oval-377-Copy-14\" cx=\"13\" cy=\"13\" r=\"3\"></circle>\n    </g>\n  </g>\n</svg>    \n`)\n  )\n}\n\nexport const patterns = {\n  grid: {\n    svg: grid,\n    label: \"Grid\",\n  },\n  \"graph-paper\": {\n    svg: graphPaper,\n    label: \"Graph Paper\",\n  },\n  dots: {\n    svg: dots,\n    label: \"Dots\",\n  },\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/templates/open-graph/basic.ts",
      "content": "import { z } from \"zod\";\n\nimport { absoluteUrl } from \"@/registry/lib/url\";\n\nimport { backgroundSchema } from \"../elements/background\";\nimport { canvasSchema } from \"../elements/canvas\";\nimport { imageSchema } from \"../elements/image\";\nimport { textSchema } from \"../elements/text\";\n\nexport const basicTemplateSchema = z.object({\n  name: z.literal(\"og:basic\"),\n  params: z.object({\n    title: textSchema.merge(\n      z.object({\n        // apply defaults\n        fontWeight: textSchema.shape.fontWeight.default(700),\n        fontSize: textSchema.shape.fontSize.default(52),\n      })\n    ),\n    description: textSchema.merge(\n      z.object({\n        // apply defaults\n        fontSize: textSchema.shape.fontSize.default(30),\n      })\n    ),\n    logo: imageSchema,\n  }),\n  background: backgroundSchema,\n  canvas: canvasSchema,\n});\nexport type BasicTemplate = z.infer<typeof basicTemplateSchema>;\n\nexport const basicTemplateDefault: BasicTemplate = {\n  name: \"og:basic\",\n  params: {\n    title: {\n      text: \"Vercel\",\n      fontFamily: \"inter\",\n      fontWeight: 700,\n      fontSize: 52,\n      color: \"#030712\",\n    },\n    description: {\n      text: \"The Frontend Cloud\",\n      fontFamily: \"inter\",\n      fontWeight: 400,\n      fontSize: 30,\n      color: \"#030712\",\n    },\n    logo: {\n      url: absoluteUrl(\"/samples/logos/vercel.svg\"),\n    },\n  },\n  background: {\n    type: \"linear-gradient\",\n    direction: \"to top right\",\n    colorStops: [\n      \"#d5d4d0 0%\",\n      \"#d5d4d0 1%\",\n      \"#eeeeec 31%\",\n      \"#efeeec 75%\",\n      \"#e9e9e7 100%\",\n    ],\n    noise: 0.15,\n    gridOverlay: {\n      pattern: \"grid\",\n      color: \"#6b7280\",\n      opacity: 0.35,\n      blurRadius: 20,\n    },\n  },\n  canvas: {\n    width: 1200,\n    height: 630,\n  },\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/templates/elements/background.ts",
      "content": "import { z } from \"zod\"\n\nconst gridOverlaySchema = z.object({\n  pattern: z.enum([\"grid\", \"graph-paper\", \"dots\"]),\n  color: z.string(),\n  opacity: z.number().default(0.5),\n  blurRadius: z.number().default(20),\n})\nexport type GridOverlayParams = z.infer<typeof gridOverlaySchema>\n\nconst colorBackgroundSchema = z.object({\n  type: z.literal(\"color\"),\n  color: z.string(),\n  noise: z.number().default(0.1),\n  gridOverlay: gridOverlaySchema.optional(),\n})\nexport type ColorBackgroundParams = z.infer<typeof colorBackgroundSchema>\n\nconst gradientDirectionSchema = z.enum([\n  \"to top\",\n  \"to top right\",\n  \"to right\",\n  \"to bottom right\",\n  \"to bottom\",\n  \"to bottom left\",\n  \"to left\",\n  \"to top left\",\n])\nexport type GradientDirection = z.infer<typeof gradientDirectionSchema>\n\nexport const linearGradientBackgroundSchema = z.object({\n  type: z.literal(\"linear-gradient\"),\n  direction: gradientDirectionSchema,\n  colorStops: z.array(z.string()),\n  noise: z.number().default(0.15),\n  gridOverlay: gridOverlaySchema.optional(),\n})\nexport type LinearGradientBackgroundParams = z.infer<\n  typeof linearGradientBackgroundSchema\n>\n\nexport const backgroundSchema = z.discriminatedUnion(\"type\", [\n  colorBackgroundSchema,\n  linearGradientBackgroundSchema,\n])\nexport type BackgroundParams = z.infer<typeof backgroundSchema>\n\nexport function toBackgroundShorthand(\n  background:\n    | Pick<LinearGradientBackgroundParams, \"type\" | \"direction\" | \"colorStops\">\n    | Pick<ColorBackgroundParams, \"type\" | \"color\">\n) {\n  if (background.type === \"color\") {\n    return background.color\n  } else if (background.type === \"linear-gradient\") {\n    return `linear-gradient(${background.direction}, ${background.colorStops.join(\", \")})`\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/url.ts",
      "content": "export function absoluteUrl(path: string) {\n  const baseUrl =\n    process.env.NEXT_PUBLIC_BASE_URL ||\n    (typeof window !== \"undefined\"\n      ? window.location.origin\n      : `https://${process.env.VERCEL_URL}`)\n  const absoluteUrl = new URL(path, baseUrl)\n  return absoluteUrl.toString()\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/components/elements/watermark.tsx",
      "content": "import { absoluteUrl } from \"@/registry/lib/url\";\n\ninterface Props {\n  style?: React.CSSProperties;\n}\n\nexport function Watermark({ style }: Props) {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        position: \"absolute\",\n        ...style,\n      }}\n    >\n      <img\n        src={absoluteUrl(\"/assets/watermark.svg\")}\n        alt=\"og.new\"\n        style={{\n          // watermark svg has a 2.7 aspect ratio\n          width: \"8.1rem\",\n          height: \"3rem\",\n        }}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
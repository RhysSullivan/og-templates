{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hero",
  "type": "registry:component",
  "title": "Hero Open Graph",
  "description": "A hero-style Open Graph template with tag, title, and featured image",
  "dependencies": [],
  "files": [
    {
      "path": "registry/components/open-graph/hero.tsx",
      "content": "import { patterns } from \"@/registry/lib/patterns\";\nimport {\n  backgroundDefault,\n  BackgroundParams,\n  canvasDefault,\n  CanvasParams,\n  Text,\n  Image,\n  toBackgroundShorthand,\n} from \"@/registry/lib/parameters\";\nimport { absoluteUrl } from \"@/registry/lib/url\";\n\ntype TemplateParams = {\n  canvas?: CanvasParams;\n  background?: BackgroundParams;\n  tag: Text;\n  title: Text;\n  image: Image;\n};\n\nexport const HeroOGComponent = (params: TemplateParams) => {\n  const canvas = params.canvas ?? canvasDefault;\n  const background = params.background ?? backgroundDefault;\n\n  return (\n    <div\n      style={{\n        background: toBackgroundShorthand(background),\n        width: canvas.width,\n        height: canvas.height,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        overflowY: \"clip\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            height: \"100%\",\n            width: \"100%\",\n\n            position: \"absolute\",\n            inset: 0,\n\n            filter: \"brightness(100%) contrast(150%)\",\n            opacity: background.noise,\n            backgroundImage: `url('${absoluteUrl(\"/noise.svg\")}')`,\n            backgroundRepeat: \"repeat\",\n          }}\n        ></div>\n\n        {background.gridOverlay && (\n          <div\n            style={{\n              height: \"100%\",\n              width: \"100%\",\n              position: \"absolute\",\n              backgroundImage: `url('${patterns[\n                background.gridOverlay.pattern\n              ].svg({\n                color: background.gridOverlay.color,\n                opacity: background.gridOverlay.opacity,\n              })}')`,\n              maskImage:\n                background.gridOverlay.blurRadius > 0\n                  ? `radial-gradient(rgb(0, 0, 0) 0%, rgba(0, 0, 0, 0) ${\n                      100 - background.gridOverlay.blurRadius\n                    }%)`\n                  : \"none\",\n            }}\n          ></div>\n        )}\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n\n            marginTop: \"4rem\",\n\n            rowGap: \"0.5rem\",\n          }}\n        >\n          {params.tag.text && (\n            <div\n              style={{\n                flexShrink: 0,\n\n                fontFamily: params.tag.fontFamily,\n                fontWeight: params.tag.fontWeight,\n                fontSize: `${params.tag.fontSize}px`,\n                color: params.tag.color,\n\n                border: \"solid\",\n                borderRadius: \"100\",\n                borderWidth: \"2px\",\n\n                paddingRight: \"16px\",\n                paddingLeft: \"16px\",\n                paddingTop: \"5px\",\n                paddingBottom: \"5px\",\n              }}\n            >\n              {params.tag.text}\n            </div>\n          )}\n\n          {params.title.text && (\n            <div\n              style={{\n                flexShrink: 0,\n\n                fontFamily: params.title.fontFamily,\n                fontWeight: params.title.fontWeight,\n                fontSize: `${params.title.fontSize}px`,\n                color: params.title.color,\n                letterSpacing: \"-0.025em\",\n              }}\n            >\n              {params.title.text}\n            </div>\n          )}\n        </div>\n\n        {params.image.url && (\n          <div\n            style={{\n              display: \"flex\",\n\n              width: \"100%\",\n\n              paddingTop: \"4rem\",\n              paddingRight: \"4rem\",\n              paddingLeft: \"4rem\",\n            }}\n          >\n            <img\n              style={{\n                borderRadius: \"0.75rem\",\n              }}\n              src={params.image.url}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/lib/patterns.ts",
      "content": "interface PatternProps {\n  color?: string\n  opacity?: number\n}\n\nfunction grid({ color = \"black\", opacity = 0.5 }: PatternProps) {\n  return (\n    \"data:image/svg+xml;base64,\" +\n    btoa(`<svg\nxmlns=\"http://www.w3.org/2000/svg\"\nwidth=\"48\"\nheight=\"48\"\nviewBox=\"0 0 48 48\"\n>\n<g fill=\"none\" opacity=\"${opacity}\">\n  <path d=\"M48 47.5001L0 47.5001\" stroke=\"${color}\"></path>\n  <path d=\"M47.5 0V48\" stroke=\"${color}\"></path>\n</g>\n</svg>\n`)\n  )\n}\n\nfunction graphPaper({ color = \"black\", opacity = 0.5 }: PatternProps) {\n  return (\n    \"data:image/svg+xml;base64,\" +\n    btoa(`<svg\nxmlns=\"http://www.w3.org/2000/svg\"\nwidth=\"100\"\nheight=\"100\"\nviewBox=\"0 0 100 100\"\n>\n<g fill-rule=\"evenodd\" fill=\"${color}\" fill-opacity=\"${opacity}\">\n  <g>\n    <path\n      opacity=\".5\"\n      d=\"M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z\"\n    />\n    <path d=\"M6 5V0H5v5H0v1h5v94h1V6h94V5H6z\" />\n  </g>\n</g>\n</svg>\n`)\n  )\n}\n\nfunction dots({ color = \"black\", opacity = 0.5 }: PatternProps) {\n  return (\n    \"data:image/svg+xml;base64,\" +\n    btoa(`<svg\n  width=\"20px\"\n  height=\"20px\"\n  viewBox=\"0 0 20 20\"\n  version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n>\n  <defs></defs>\n  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n    <g id=\"dots\" fill=\"${color}\" fill-opacity=\"${opacity}\">\n      <circle id=\"Oval-377-Copy-9\" cx=\"3\" cy=\"3\" r=\"3\"></circle>\n      <circle id=\"Oval-377-Copy-14\" cx=\"13\" cy=\"13\" r=\"3\"></circle>\n    </g>\n  </g>\n</svg>    \n`)\n  )\n}\n\nexport const patterns = {\n  grid: {\n    svg: grid,\n    label: \"Grid\",\n  },\n  \"graph-paper\": {\n    svg: graphPaper,\n    label: \"Graph Paper\",\n  },\n  dots: {\n    svg: dots,\n    label: \"Dots\",\n  },\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/url.ts",
      "content": "export function absoluteUrl(path: string) {\n  const baseUrl =\n    process.env.NEXT_PUBLIC_BASE_URL ||\n    (typeof window !== \"undefined\"\n      ? window.location.origin\n      : `https://${process.env.VERCEL_URL}`)\n  const absoluteUrl = new URL(path, baseUrl)\n  return absoluteUrl.toString()\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/noise.ts",
      "content": "const NOISE_SVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"500\">\n    <filter id=\"noise\" x=\"0\" y=\"0\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.65\" numOctaves=\"3\" stitchTiles=\"stitch\"/>\n      <feBlend mode=\"screen\"/>\n    </filter>\n    <rect width=\"500\" height=\"500\" filter=\"url(#noise)\" opacity=\"1\"/>\n</svg>`;\n\nexport const NOISE_IMAGE = `url(\"data:image/svg+xml,${encodeURIComponent(\n  NOISE_SVG\n)}\")`;\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/load-google-font.ts",
      "content": "export async function loadGoogleFont(font: string, text: string) {\n  const url = `https://fonts.googleapis.com/css2?family=${font}&text=${encodeURIComponent(\n    text\n  )}`;\n  const css = await (await fetch(url)).text();\n  const resource = css.match(\n    /src: url\\((.+)\\) format\\('(opentype|truetype)'\\)/\n  );\n\n  if (resource) {\n    const response = await fetch(resource[1]);\n    if (response.status == 200) {\n      return await response.arrayBuffer();\n    }\n  }\n\n  throw new Error(\"failed to load font data\");\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/parameters.ts",
      "content": "// Font types - you may need to update these based on your actual font definitions\ntype FontFamily = string;\ntype FontWeight = number;\n\n// Text types\nexport interface Text {\n  text: string;\n  fontFamily: FontFamily;\n  fontWeight: FontWeight;\n  fontSize: number;\n  color: string;\n}\n\n// Image types\nexport interface Image {\n  url: string;\n}\n\n// Canvas types\nconst DEFAULT_WIDTH = 1200;\nconst DEFAULT_HEIGHT = 630;\n\nexport interface CanvasParams {\n  width: number;\n  height: number;\n}\n\nexport const canvasDefault: CanvasParams = {\n  width: DEFAULT_WIDTH,\n  height: DEFAULT_HEIGHT,\n};\n\nexport const backgroundDefault: BackgroundParams = {\n  type: \"color\",\n  color: \"#fff\",\n  noise: 0.5,\n};\n\n// Background types\nexport interface GridOverlayParams {\n  pattern: \"grid\" | \"graph-paper\" | \"dots\";\n  color: string;\n  opacity: number;\n  blurRadius: number;\n}\n\nexport interface ColorBackgroundParams {\n  type: \"color\";\n  color: string;\n  noise: number;\n  gridOverlay?: GridOverlayParams;\n}\n\nexport type GradientDirection =\n  | \"to top\"\n  | \"to top right\"\n  | \"to right\"\n  | \"to bottom right\"\n  | \"to bottom\"\n  | \"to bottom left\"\n  | \"to left\"\n  | \"to top left\";\n\nexport interface LinearGradientBackgroundParams {\n  type: \"linear-gradient\";\n  direction: GradientDirection;\n  colorStops: string[];\n  noise: number;\n  gridOverlay?: GridOverlayParams;\n}\n\nexport type BackgroundParams =\n  | ColorBackgroundParams\n  | LinearGradientBackgroundParams;\n\nexport function toBackgroundShorthand(\n  background:\n    | Pick<LinearGradientBackgroundParams, \"type\" | \"direction\" | \"colorStops\">\n    | Pick<ColorBackgroundParams, \"type\" | \"color\">\n) {\n  if (background.type === \"color\") {\n    return background.color;\n  } else if (background.type === \"linear-gradient\") {\n    return `linear-gradient(${\n      background.direction\n    }, ${background.colorStops.join(\", \")})`;\n  }\n}\n\nexport type TemplateParams = {\n  canvas?: CanvasParams;\n  background?: BackgroundParams;\n  title: Text;\n  description: Text;\n  logo?: Image;\n};\n",
      "type": "registry:lib"
    }
  ]
}